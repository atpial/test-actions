name: Deploy .NET 8 Project to IIS with Zero Downtime
on:
  push:
    branches:
      - main
      - dev
      - master
jobs:

  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Publish
      run: dotnet publish -c Release -o ./publish

    # - name: Archive project files
    #   run: tar -czvf publish.tar.gz -C ./publish .
    - name: Archive project files
      shell: pwsh
      run: |
        Compress-Archive -Path ./publish -DestinationPath publish.zip
        $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ secrets.EC2_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
        # Copy-Item "publish.tar.gz" -Destination "C:\websites\${{ env.target_directory }}" -ToSession $session
        Copy-Item "publish.zip" -Destination "C:\websites\${{ env.target_directory }}" -ToSession $session

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: publish
        path: publish.zip

  deploy:
    runs-on: windows-latest  # Use Windows runner
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: publish
        # path: ./artifact

    # - name: Set artifact path environment variable
    #   run: echo "ARTIFACT_PATH=$(pwd)/artifact/publish.tar.gz" >> $GITHUB_ENV

    - name: Verify artifact download
      run: dir ./
        
    - name: Install dependencies
      run: |
        choco install jq

    - name: Set WinRM Password
      run: echo "WINRM_PASSWORD=${{ secrets.EC2_PASSWORD }}" >> $env:GITHUB_ENV


    - name: Ensure directories exist and determine target directory
      id: determine-directory
      shell: pwsh
      run: |
        $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ secrets.EC2_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
        Invoke-Command -Session $session -ScriptBlock {
          $bluePath = "C:\websites\zPax-Test-Portal-blue"
          $greenPath = "C:\websites\zPax-Test-Portal-green"
          if (-Not (Test-Path $bluePath)) { New-Item -ItemType Directory -Path $bluePath }
          if (-Not (Test-Path $greenPath)) { New-Item -ItemType Directory -Path $greenPath }
          if (Test-Path $bluePath) {
            return "zPax-Test-Portal-green"
          } else {
            return "zPax-Test-Portal-blue"
          }
        } -ArgumentList $null -OutVariable targetDirectory
        echo "target_directory=$($targetDirectory.Trim().Replace('return', '').Trim())" >> $env:GITHUB_ENV
        Remove-PSSession -Session $session

    - name: Verify target directory
      run: echo "Target directory is ${{ env.target_directory }}"

    - name: Copy artifact to target directory
      shell: pwsh
      run: |
        $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ secrets.EC2_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
        Copy-Item "publish.zip" -Destination "C:\websites\${{ env.target_directory }}" -ToSession $session

    - name: Verify artifact copy
      shell: pwsh
      run: |
        $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ secrets.EC2_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
        Invoke-Command -Session $session -ScriptBlock {
          Get-ChildItem "C:\websites\${{ env.target_directory }}"
        }
        Remove-PSSession -Session $session

    - name: Extract files and configure IIS
      shell: pwsh
      run: |
        $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ secrets.EC2_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
        Invoke-Command -Session $session -ScriptBlock {
          # Debug logging for paths
          Write-Output "Current directory before changing: $(Get-Location)"
          cd "C:\websites\${{ env.target_directory }}"
          Write-Output "Changed to directory: $(Get-Location)"
          
          # Verify tar file exists
          if (Test-Path "publish.zip") {
            Write-Output "Found publish.zip, extracting..."
            # tar -xzvf "publish.tar.gz"
            Expand-Archive -Path publish.zip -DestinationPath . -Force
            Remove-Item "publish.zip"
          } else {
            Write-Error "publish.zip not found in $(Get-Location)"
            exit 1
          }

          try {
            Import-Module WebAdministration -ErrorAction Stop
            $currentPhysicalPath = (Get-Website -Name "zPax-Test-Portal").PhysicalPath
            Write-Output "Current physical path of the website 'zPax-Test-Portal': $currentPhysicalPath"
            
            $bluePath = "C:\websites\zPax-Test-Portal-blue"
            $greenPath = "C:\websites\zPax-Test-Portal-green"
            Write-Output "Comparing with path: $bluePath"
            Write-Output "Comparing with path: $greenPath"

            if ($currentPhysicalPath -eq $bluePath) {
              Write-Output "Current path matches blue path. Switching to green path."
              Set-ItemProperty "IIS:\Sites\zPax-Test-Portal" -name physicalPath -value $greenPath
            } else {
              Write-Output "Current path does not match blue path. Switching to blue path."
              Set-ItemProperty "IIS:\Sites\zPax-Test-Portal" -name physicalPath -value $bluePath
            }
            Write-Output "Restarting the application pool 'zPax-Test-Portal'."
            Restart-WebAppPool -Name "zPax-Test-Portal"
          } catch {
            Write-Error "Failed to import WebAdministration module or manage IIS: $_"
          }
        }
        Remove-PSSession -Session $session

        
    - name: Complete job
      run: echo "Deployment completed."
